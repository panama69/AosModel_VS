//----------------------------------------------------------------------------------------------------
// <auto-generated>
//
//		This code was automatically generated by the LeanFT Application Model code generator.
//
//		Changes to this file may cause incorrect behavior and will be lost 
//		when the code is regenerated.
//
// </auto-generated>
//----------------------------------------------------------------------------------------------------
using System;
using HP.LFT.SDK;  
using System.Collections.Generic;

namespace AosModel
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("This class is automatically generated by the LeanFT Application Model code generator.", "12.52")]
	public class AosModel : AppModelBase
	{
		#region Constructors

		public AosModel(ITestObject contextTestObject)
		{
			Name = @"AosModel";
			AdvantageShoppingPage = new AdvantageShoppingPageNode(contextTestObject, this);
			MyAccountSignOut = new MyAccountSignOutNode(contextTestObject, this);
			Search = new SearchNode(contextTestObject, this);
			ShoppingCart = new ShoppingCartNode(contextTestObject, this);
			CartCount = new CartCountNode(contextTestObject, this);
			AdvantageLogo = new AdvantageLogoNode(contextTestObject, this);
			Price = new PriceNode(contextTestObject, this);
			Compatibility = new CompatibilityNode(contextTestObject, this);
			WirelessTechnology = new WirelessTechnologyNode(contextTestObject, this);
			Color = new ColorNode(contextTestObject, this);
			OperatingSystem = new OperatingSystemNode(contextTestObject, this);
			Graphics = new GraphicsNode(contextTestObject, this);
			Memory = new MemoryNode(contextTestObject, this);
			Display = new DisplayNode(contextTestObject, this);
			Processor = new ProcessorNode(contextTestObject, this);
			CUSTOMIZATIONWebElement = new CUSTOMIZATIONWebElementNode(contextTestObject, this);
			AddToCart = new AddToCartNode(contextTestObject, this);
			MinusQuantity = new MinusQuantityNode(contextTestObject, this);
			PlusQuantity = new PlusQuantityNode(contextTestObject, this);
			OrderQuantity = new OrderQuantityNode(contextTestObject, this);
			RebuildDescriptions();
			
		}

		#endregion

		#region Test Objects
	
		public AdvantageShoppingPageNode AdvantageShoppingPage { get; private set; }
		public MyAccountSignOutNode MyAccountSignOut { get; private set; }
		public SearchNode Search { get; private set; }
		public ShoppingCartNode ShoppingCart { get; private set; }
		public CartCountNode CartCount { get; private set; }
		public AdvantageLogoNode AdvantageLogo { get; private set; }
		public PriceNode Price { get; private set; }
		public CompatibilityNode Compatibility { get; private set; }
		public WirelessTechnologyNode WirelessTechnology { get; private set; }
		public ColorNode Color { get; private set; }
		public OperatingSystemNode OperatingSystem { get; private set; }
		public GraphicsNode Graphics { get; private set; }
		public MemoryNode Memory { get; private set; }
		public DisplayNode Display { get; private set; }
		public ProcessorNode Processor { get; private set; }
		public CUSTOMIZATIONWebElementNode CUSTOMIZATIONWebElement { get; private set; }
		public AddToCartNode AddToCart { get; private set; }
		public MinusQuantityNode MinusQuantity { get; private set; }
		public PlusQuantityNode PlusQuantity { get; private set; }
		public OrderQuantityNode OrderQuantity { get; private set; }
	
		#endregion
	
		#region Inner Classes
	
		public sealed class AdvantageShoppingPageNode : PageNodeBase
		{
			#region Constructors
		
			public AdvantageShoppingPageNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				OurProducts = new OurProductsNode(this, applicationModel);
				SpecialOfferItems = new SpecialOfferItemsNode(this, applicationModel);
				PopularItems = new PopularItemsNode(this, applicationModel);
				Speakers = new SpeakersNode(this, applicationModel);
				Tablets = new TabletsNode(this, applicationModel);
				Laptops = new LaptopsNode(this, applicationModel);
				Mice = new MiceNode(this, applicationModel);
				Headphones = new HeadphonesNode(this, applicationModel);
				SeeOffer = new SeeOfferNode(this, applicationModel);
				SpecialOffers = new SpecialOffersNode(this, applicationModel);
				OnlineShoppingSignIn = new OnlineShoppingSignInNode(this, applicationModel);
				SignInWithFacebook = new SignInWithFacebookNode(this, applicationModel);
				Password = new PasswordNode(this, applicationModel);
				Email = new EmailNode(this, applicationModel);
				RememberMe = new RememberMeNode(this, applicationModel);
				SignIn = new SignInNode(this, applicationModel);
				ForgotYourPassword = new ForgotYourPasswordNode(this, applicationModel);
				CreateNewAccount = new CreateNewAccountNode(this, applicationModel);
				ClosePopUp = new ClosePopUpNode(this, applicationModel);
				PRICEWebElement = new PRICEWebElementNode(this, applicationModel);
				DisplayName = @"Â Advantage Shopping";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.PageDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.PageDescription();
			}
		
			#endregion
		
			#region Test Objects
		
			public OurProductsNode OurProducts { get; private set; }
			public SpecialOfferItemsNode SpecialOfferItems { get; private set; }
			public PopularItemsNode PopularItems { get; private set; }
			public SpeakersNode Speakers { get; private set; }
			public TabletsNode Tablets { get; private set; }
			public LaptopsNode Laptops { get; private set; }
			public MiceNode Mice { get; private set; }
			public HeadphonesNode Headphones { get; private set; }
			public SeeOfferNode SeeOffer { get; private set; }
			public SpecialOffersNode SpecialOffers { get; private set; }
			public OnlineShoppingSignInNode OnlineShoppingSignIn { get; private set; }
			public SignInWithFacebookNode SignInWithFacebook { get; private set; }
			public PasswordNode Password { get; private set; }
			public EmailNode Email { get; private set; }
			public RememberMeNode RememberMe { get; private set; }
			public SignInNode SignIn { get; private set; }
			public ForgotYourPasswordNode ForgotYourPassword { get; private set; }
			public CreateNewAccountNode CreateNewAccount { get; private set; }
			public ClosePopUpNode ClosePopUp { get; private set; }
			public PRICEWebElementNode PRICEWebElement { get; private set; }
		
			#endregion
		
			#region Inner Classes
		
			public sealed class OurProductsNode : WebElementNodeBase
			{
				#region Constructors
			
				public OurProductsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"OUR PRODUCTS";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"A",
						InnerText = @"OUR PRODUCTS"
					};
				}
			
				#endregion
			
			}

			public sealed class SpecialOfferItemsNode : WebElementNodeBase
			{
				#region Constructors
			
				public SpecialOfferItemsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"SPECIAL OFFER ITEMS";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"A",
						InnerText = @"SPECIAL OFFER ITEMS"
					};
				}
			
				#endregion
			
			}

			public sealed class PopularItemsNode : WebElementNodeBase
			{
				#region Constructors
			
				public PopularItemsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"POPULAR ITEMS";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"A",
						InnerText = @"POPULAR ITEMS"
					};
				}
			
				#endregion
			
			}

			public sealed class SpeakersNode : WebElementNodeBase
			{
				#region Constructors
			
				public SpeakersNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"SPEAKERS";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"SPAN",
						InnerText = @"SPEAKERS"
					};
				}
			
				#endregion
			
			}

			public sealed class TabletsNode : WebElementNodeBase
			{
				#region Constructors
			
				public TabletsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"TABLETS";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"SPAN",
						InnerText = @"TABLETS"
					};
				}
			
				#endregion
			
			}

			public sealed class LaptopsNode : WebElementNodeBase
			{
				#region Constructors
			
				public LaptopsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"LAPTOPS";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"SPAN",
						InnerText = @"LAPTOPS"
					};
				}
			
				#endregion
			
			}

			public sealed class MiceNode : WebElementNodeBase
			{
				#region Constructors
			
				public MiceNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"MICE";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"SPAN",
						InnerText = @"MICE"
					};
				}
			
				#endregion
			
			}

			public sealed class HeadphonesNode : WebElementNodeBase
			{
				#region Constructors
			
				public HeadphonesNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"HEADPHONES";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"SPAN",
						InnerText = @"HEADPHONES"
					};
				}
			
				#endregion
			
			}

			public sealed class SeeOfferNode : ButtonNodeBase
			{
				#region Constructors
			
				public SeeOfferNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @" SEE OFFER ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription
					{
						ButtonType = @"submit",
						TagName = @"BUTTON",
						Name = @" SEE OFFER "
					};
				}
			
				#endregion
			
			}

			public sealed class SpecialOffersNode : WebElementNodeBase
			{
				#region Constructors
			
				public SpecialOffersNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Eye-catching design HP Pavilion 15z Touch Laptop Stylish inside and out and with a new gradient-design around the keyboard, you'll be sure to make an impression wherever you take it. SEE OFFER ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						CSSSelector = @"#div-special-offer"
					};
				}
			
				#endregion
			
			}

			public sealed class OnlineShoppingSignInNode : WebElementNodeBase
			{
				#region Constructors
			
				public OnlineShoppingSignInNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Online shopping SIGN IN WITH FACEBOOK OR REMEMBER ME SIGN IN Forgot your password? CREATE NEW ACCOUNT ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						InnerText = @"Online shopping SIGN IN WITH FACEBOOK OR REMEMBER ME SIGN IN Forgot your password? CREATE NEW ACCOUNT ",
						CSSSelector = @".PopUp div:nth-child(1)"
					};
				}
			
				#endregion
			
			}

			public sealed class SignInWithFacebookNode : WebElementNodeBase
			{
				#region Constructors
			
				public SignInWithFacebookNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"SIGN IN WITH FACEBOOK";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						TagName = @"SPAN",
						InnerText = @"SIGN IN WITH FACEBOOK"
					};
				}
			
				#endregion
			
			}

			public sealed class PasswordNode : EditFieldNodeBase
			{
				#region Constructors
			
				public PasswordNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Password";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription
					{
						Attributes = { {@"ng-model", @"loginUser.loginPassword"} }
					};
				}
			
				#endregion
			
			}

			public sealed class EmailNode : EditFieldNodeBase
			{
				#region Constructors
			
				public EmailNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Email";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.EditFieldDescription
					{
						Attributes = { {@"ng-model", @"loginUser.email"} }
					};
				}
			
				#endregion
			
			}

			public sealed class RememberMeNode : CheckBoxNodeBase
			{
				#region Constructors
			
				public RememberMeNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"RembemberMe";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.CheckBoxDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.CheckBoxDescription
					{
						Attributes = { {@"ng-model", @"rememberMe"} , {@"type", @"checkbox"} }
					};
				}
			
				#endregion
			
			}

			public sealed class SignInNode : ButtonNodeBase
			{
				#region Constructors
			
				public SignInNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"SIGN IN";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.ButtonDescription
					{
						Name = @"SIGN IN"
					};
				}
			
				#endregion
			
			}

			public sealed class ForgotYourPasswordNode : WebElementNodeBase
			{
				#region Constructors
			
				public ForgotYourPasswordNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"Forgot your password?";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						InnerText = @"Forgot your password?"
					};
				}
			
				#endregion
			
			}

			public sealed class CreateNewAccountNode : WebElementNodeBase
			{
				#region Constructors
			
				public CreateNewAccountNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"CREATE NEW ACCOUNT";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						InnerText = @"CREATE NEW ACCOUNT"
					};
				}
			
				#endregion
			
			}

			public sealed class ClosePopUpNode : WebElementNodeBase
			{
				#region Constructors
			
				public ClosePopUpNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"ClosePopUp";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						ClassName = @"closePopUpBtn"
					};
				}
			
				#endregion
			
			}

			public sealed class PRICEWebElementNode : WebElementNodeBase
			{
				#region Constructors
			
				public PRICEWebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
				{
					DisplayName = @"PRICE ";
				}
			
				#endregion
			
				#region Description
			
				protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
				{
					return new HP.LFT.SDK.Web.WebElementDescription
					{
						CSSSelector = @"#accordionPrice"
					};
				}
			
				#endregion
			
			}

			#endregion
		}

		public sealed class MyAccountSignOutNode : WebElementNodeBase
		{
			#region Constructors
		
			public MyAccountSignOutNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"My account Sign out ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					TagName = @"A",
					InnerText = @"My account Sign out "
				};
			}
		
			#endregion
		
		}

		public sealed class SearchNode : WebElementNodeBase
		{
			#region Constructors
		
			public SearchNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"WebElement";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					Id = @"search"
				};
			}
		
			#endregion
		
		}

		public sealed class ShoppingCartNode : LinkNodeBase
		{
			#region Constructors
		
			public ShoppingCartNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"0 ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.LinkDescription
				{
					TagName = @"A",
					Attributes = { {@"class", @"img"} , {@"href", @"#/shoppingCart"} }
				};
			}
		
			#endregion
		
		}

		public sealed class CartCountNode : WebElementNodeBase
		{
			#region Constructors
		
			public CartCountNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"1";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					Attributes = { {@"class", @"cart ng-binding"} },
					Index = 1
				};
			}
		
			#endregion
		
		}

		public sealed class AdvantageLogoNode : LinkNodeBase
		{
			#region Constructors
		
			public AdvantageLogoNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"dvantage ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.LinkDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.LinkDescription
				{
					TagName = @"A",
					InnerText = @"dvantage "
				};
			}
		
			#endregion
		
		}

		public sealed class PriceNode : WebElementNodeBase
		{
			#region Constructors
		
			public PriceNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"PRICE ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"PRICE "
				};
			}
		
			#endregion
		
		}

		public sealed class CompatibilityNode : WebElementNodeBase
		{
			#region Constructors
		
			public CompatibilityNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"COMPATIBILITY ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"COMPATIBILITY "
				};
			}
		
			#endregion
		
		}

		public sealed class WirelessTechnologyNode : WebElementNodeBase
		{
			#region Constructors
		
			public WirelessTechnologyNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"WIRELESS TECHNOLOGY ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"WIRELESS TECHNOLOGY "
				};
			}
		
			#endregion
		
		}

		public sealed class ColorNode : WebElementNodeBase
		{
			#region Constructors
		
			public ColorNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"COLOR ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"COLOR ",
					Attributes = { {@"id", @"accordionColor"} }
				};
			}
		
			#endregion
		
		}

		public sealed class OperatingSystemNode : WebElementNodeBase
		{
			#region Constructors
		
			public OperatingSystemNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"OPERATING SYSTEM ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"OPERATING SYSTEM "
				};
			}
		
			#endregion
		
		}

		public sealed class GraphicsNode : WebElementNodeBase
		{
			#region Constructors
		
			public GraphicsNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"GRAPHICS ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"GRAPHICS "
				};
			}
		
			#endregion
		
		}

		public sealed class MemoryNode : WebElementNodeBase
		{
			#region Constructors
		
			public MemoryNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"MEMORY ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"MEMORY "
				};
			}
		
			#endregion
		
		}

		public sealed class DisplayNode : WebElementNodeBase
		{
			#region Constructors
		
			public DisplayNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"DISPLAY ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"DISPLAY "
				};
			}
		
			#endregion
		
		}

		public sealed class ProcessorNode : WebElementNodeBase
		{
			#region Constructors
		
			public ProcessorNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"PROCESSOR ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"PROCESSOR "
				};
			}
		
			#endregion
		
		}

		public sealed class CUSTOMIZATIONWebElementNode : WebElementNodeBase
		{
			#region Constructors
		
			public CUSTOMIZATIONWebElementNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"CUSTOMIZATION ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					InnerText = @"CUSTOMIZATION "
				};
			}
		
			#endregion
		
		}

		public sealed class AddToCartNode : ButtonNodeBase
		{
			#region Constructors
		
			public AddToCartNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @" ADD TO CART ";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.ButtonDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.ButtonDescription
				{
					Name = @" ADD TO CART "
				};
			}
		
			#endregion
		
		}

		public sealed class MinusQuantityNode : WebElementNodeBase
		{
			#region Constructors
		
			public MinusQuantityNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"Minus Quantity";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					ClassName = @"minus"
				};
			}
		
			#endregion
		
		}

		public sealed class PlusQuantityNode : WebElementNodeBase
		{
			#region Constructors
		
			public PlusQuantityNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"Plus Quantity";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.WebElementDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.WebElementDescription
				{
					ClassName = @"plus"
				};
			}
		
			#endregion
		
		}

		public sealed class OrderQuantityNode : EditFieldNodeBase
		{
			#region Constructors
		
			public OrderQuantityNode(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel)
			{
				DisplayName = @"Oder Quantity";
			}
		
			#endregion
		
			#region Description
		
			protected override HP.LFT.SDK.Web.EditFieldDescription CreateDescription()
			{
				return new HP.LFT.SDK.Web.EditFieldDescription
				{
					Attributes = { {@"ng-model", @"numAttr"} }
				};
			}
		
			#endregion
		
		}

		#endregion

		#region Base Classes

		public abstract class LinkNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.ILink, HP.LFT.SDK.Web.LinkDescription>, HP.LFT.SDK.Web.ILink
		{
			public LinkNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Href
			{
				get { return Concrete.Href; }		
			}
	
			public string Target
			{
				get { return Concrete.Target; }		
			}
	
			public string FontName
			{
				get { return Concrete.FontName; }		
			}
	
			public string BackgroundColor
			{
				get { return Concrete.BackgroundColor; }		
			}
	
			public string Color
			{
				get { return Concrete.Color; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		public abstract class CheckBoxNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.ICheckBox, HP.LFT.SDK.Web.CheckBoxDescription>, HP.LFT.SDK.Web.ICheckBox
		{
			public CheckBoxNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void Set(bool state)
			{
				 Concrete.Set(state);
			}
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public bool IsChecked
			{
				get { return Concrete.IsChecked; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public string Type
			{
				get { return Concrete.Type; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		public abstract class EditFieldNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IEditField, HP.LFT.SDK.Web.EditFieldDescription>, HP.LFT.SDK.Web.IEditField
		{
			public EditFieldNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void SetSecure(string encodedText)
			{
				 Concrete.SetSecure(encodedText);
			}
	
			public void SetValue(string text)
			{
				 Concrete.SetValue(text);
			}
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string DefaultValue
			{
				get { return Concrete.DefaultValue; }		
			}
	
			public int MaxLength
			{
				get { return Concrete.MaxLength; }		
			}
	
			public string Pattern
			{
				get { return Concrete.Pattern; }		
			}
	
			public uint RowsCount
			{
				get { return Concrete.RowsCount; }		
			}
	
			public string Type
			{
				get { return Concrete.Type; }		
			}
	
			public string Value
			{
				get { return Concrete.Value; }		
			}
	
			public bool IsReadOnly
			{
				get { return Concrete.IsReadOnly; }		
			}
	
			public bool IsRequired
			{
				get { return Concrete.IsRequired; }		
			}
	
			public uint MaxCharsInLine
			{
				get { return Concrete.MaxCharsInLine; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		public abstract class ButtonNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IButton, HP.LFT.SDK.Web.ButtonDescription>, HP.LFT.SDK.Web.IButton
		{
			public ButtonNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string ButtonType
			{
				get { return Concrete.ButtonType; }		
			}
	
			public bool IsEnabled
			{
				get { return Concrete.IsEnabled; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		public abstract class WebElementNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IWebElement, HP.LFT.SDK.Web.WebElementDescription>, HP.LFT.SDK.Web.IWebElement
		{
			public WebElementNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public void DoubleClick()
			{
				 Concrete.DoubleClick();
			}
	
			public void DoubleClick(HP.LFT.SDK.Web.WebDoubleClickArgs args)
			{
				 Concrete.DoubleClick(args);
			}
	
			public void HoverTap()
			{
				 Concrete.HoverTap();
			}
	
			public void HoverTap(HP.LFT.SDK.Location location)
			{
				 Concrete.HoverTap(location);
			}
	
			public void FireEvent(HP.LFT.SDK.Web.EventInfo eventInfo)
			{
				 Concrete.FireEvent(eventInfo);
			}
	
			public void LongPress()
			{
				 Concrete.LongPress();
			}
	
			public void LongPress(HP.LFT.SDK.Web.WebLongPressArgs args)
			{
				 Concrete.LongPress(args);
			}
	
			public void Pan(long deltaX, long deltaY)
			{
				 Concrete.Pan(deltaX, deltaY);
			}
	
			public void Pan(HP.LFT.SDK.Web.WebPanArgs args)
			{
				 Concrete.Pan(args);
			}
	
			public void Pinch(double scale)
			{
				 Concrete.Pinch(scale);
			}
	
			public void Pinch(HP.LFT.SDK.Web.WebPinchArgs args)
			{
				 Concrete.Pinch(args);
			}
	
			public void Swipe(HP.LFT.SDK.SwipeDirection direction)
			{
				 Concrete.Swipe(direction);
			}
	
			public void Swipe(HP.LFT.SDK.Web.WebSwipeArgs args)
			{
				 Concrete.Swipe(args);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public void Click(HP.LFT.SDK.MouseButton button = HP.LFT.SDK.MouseButton.Left)
			{
				 Concrete.Click(button);
			}
	
			public void Click(HP.LFT.SDK.ClickArgs args)
			{
				 Concrete.Click(args);
			}
	
			public string GetAttribute(string attributeName)
			{
				return Concrete.GetAttribute(attributeName);
			}
	
			public string GetComputedStyle(string styleProperty)
			{
				return Concrete.GetComputedStyle(styleProperty);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget)
			{
				 Concrete.DragAndDropOn(dropTarget);
			}
	
			public void DragAndDropOn(HP.LFT.SDK.ISupportDragAndDrop dropTarget, HP.LFT.SDK.DragAndDropArgs dragAndDropArgs)
			{
				 Concrete.DragAndDropOn(dropTarget, dragAndDropArgs);
			}
	
			#endregion
	
			#region Public Properties
	
			public string XPath
			{
				get { return Concrete.XPath; }		
			}
	
			public string CSSSelector
			{
				get { return Concrete.CSSSelector; }		
			}
	
			public string Role
			{
				get { return Concrete.Role; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public string ClassName
			{
				get { return Concrete.ClassName; }		
			}
	
			public string Id
			{
				get { return Concrete.Id; }		
			}
	
			public string TagName
			{
				get { return Concrete.TagName; }		
			}
	
			public string InnerHTML
			{
				get { return Concrete.InnerHTML; }		
			}
	
			public string OuterHTML
			{
				get { return Concrete.OuterHTML; }		
			}
	
			public string InnerText
			{
				get { return Concrete.InnerText; }		
			}
	
			public string OuterText
			{
				get { return Concrete.OuterText; }		
			}
	
			public string Name
			{
				get { return Concrete.Name; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public bool IsVisible
			{
				get { return Concrete.IsVisible; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Attributes
			{
				get { return Concrete.Attributes; }		
			}
	
			public System.Collections.Generic.IReadOnlyDictionary<string, string> Styles
			{
				get { return Concrete.Styles; }		
			}
	
			public System.Drawing.Point Location
			{
				get { return Concrete.Location; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		public abstract class PageNodeBase : AppModelNodeBase<HP.LFT.SDK.Web.IPage, HP.LFT.SDK.Web.PageDescription>, HP.LFT.SDK.Web.IPage
		{
			public PageNodeBase(ITestObject parent, AppModelBase applicationModel) : base(parent, applicationModel) { }

			#region Public Methods
	
			public TResult RunJavaScript<TResult>(string scriptToRun) 
			{
				return Concrete.RunJavaScript<TResult>(scriptToRun);
			}
	
			public string RunJavaScript(string scriptToRun)
			{
				return Concrete.RunJavaScript(scriptToRun);
			}
	
			public void Sync()
			{
				 Concrete.Sync();
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.Describe<TChild>(description);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.XPathDescription xpath)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(xpath);
			}
	
			public TChild Describe<TChild>(HP.LFT.SDK.Web.CSSDescription cssSelector)  where TChild:class, HP.LFT.SDK.Web.IWebElement
			{
				return Concrete.Describe<TChild>(cssSelector);
			}
	
			public HP.LFT.SDK.IDescription GetDescription()
			{
				return Concrete.GetDescription();
			}
	
			public TChild[] FindChildren<TChild>(HP.LFT.SDK.IDescription selector)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.FindChildren<TChild>(selector);
			}
	
			public bool Exists()
			{
				return Concrete.Exists();
			}
	
			public bool Exists(uint timeout)
			{
				return Concrete.Exists(timeout);
			}
	
			public System.Drawing.Image GetSnapshot()
			{
				return Concrete.GetSnapshot();
			}
	
			public void Highlight()
			{
				 Concrete.Highlight();
			}
	
			public uint HighlightMatches<TChild>(HP.LFT.SDK.IDescription description)  where TChild:class, HP.LFT.SDK.ITestObject
			{
				return Concrete.HighlightMatches<TChild>(description);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind)
			{
				return Concrete.GetTextLocations(textToFind);
			}
	
			public System.Drawing.Rectangle[] GetTextLocations(string textToFind, System.Drawing.Rectangle textArea)
			{
				return Concrete.GetTextLocations(textToFind, textArea);
			}
	
			public string GetVisibleText()
			{
				return Concrete.GetVisibleText();
			}
	
			public string GetVisibleText(System.Drawing.Rectangle textArea)
			{
				return Concrete.GetVisibleText(textArea);
			}
	
			public System.Nullable<System.Drawing.Point> VerifyImageExists(System.Drawing.Image imageToFind, byte similarity = 100)
			{
				return Concrete.VerifyImageExists(imageToFind, similarity);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, pixelTolerance, rgbTolerance);
			}
	
			public bool VerifyImageMatch(System.Drawing.Image expectedImage, HP.LFT.SDK.Utils.ImageMaskArea maskArea, byte pixelTolerance = 0, byte rgbTolerance = 0)
			{
				return Concrete.VerifyImageMatch(expectedImage, maskArea, pixelTolerance, rgbTolerance);
			}
	
			#endregion
	
			#region Public Properties
	
			public string Url
			{
				get { return Concrete.Url; }		
			}
	
			public string Text
			{
				get { return Concrete.Text; }		
			}
	
			public string Title
			{
				get { return Concrete.Title; }		
			}
	
			public System.Drawing.Point AbsoluteLocation
			{
				get { return Concrete.AbsoluteLocation; }		
			}
	
			public System.Drawing.Size Size
			{
				get { return Concrete.Size; }		
			}
	
			public string DisplayName
			{
				get { return Concrete.DisplayName; }		
				set { Concrete.DisplayName = value; }
			}
	
			public dynamic NativeObject
			{
				get { return Concrete.NativeObject; }		
			}
	
			#endregion
		}

		#endregion
	}
}
